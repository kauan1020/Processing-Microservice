version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: fiap-x-video-processing-db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: fiap-x-video-processing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: fiap-x-video-processing-zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka:
    image: bitnami/kafka:3.5
    container_name: fiap-x-video-processing-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_EXTERNAL_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CLIENT://:29092,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s

  db-migration:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap-x-db-migration
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    networks:
      - fiap_x_shared_network
    command: ["alembic", "upgrade", "head"]

  video-processing-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap-x-video-processing-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    ports:
      - "${APP_PORT}:8001"
    env_file:
      - .env
    volumes:
      - video_storage:/app/storage
      - ./logs:/app/logs
      - .:/app
      - /app/__pycache__
    environment:
      - RELOAD=true
      - AUTH_SERVICE_URL=http://fiap_x_auth_service:8000
      - USER_SERVICE_URL=http://fiap_x_auth_service:8000
      - DATABASE_HOST=fiap-x-video-processing-db
    command: [ "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001", "--reload" ]
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  video-processing-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap-x-video-processing-worker-1
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      video-processing-api:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - WORKER_ID=worker-1
      - AUTH_SERVICE_URL=http://fiap_x_auth_service:8000
      - USER_SERVICE_URL=http://fiap_x_auth_service:8000
    volumes:
      - video_storage:/app/storage
      - ./logs:/app/logs
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    command: ["python", "worker.py", "--workers", "1", "--worker-id-prefix", "worker-1"]

  video-processing-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fiap-x-video-processing-worker-2
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      video-processing-api:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - WORKER_ID=worker-2
      - AUTH_SERVICE_URL=http://fiap_x_auth_service:8000
      - USER_SERVICE_URL=http://fiap_x_auth_service:8000
    volumes:
      - video_storage:/app/storage
      - ./logs:/app/logs
    networks:
      - fiap_x_shared_network
    restart: unless-stopped
    command: ["python", "worker.py", "--workers", "1", "--worker-id-prefix", "worker-2"]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fiap-x-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - AUTH_TYPE=LOGIN_FORM
      - SPRING_SECURITY_USER_NAME=${KAFKA_UI_USERNAME}
      - SPRING_SECURITY_USER_PASSWORD=${KAFKA_UI_PASSWORD}
    networks:
      - fiap_x_shared_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  video_storage:
    driver: local

networks:
  fiap_x_shared_network:
    driver: bridge
    name: fiap_x_shared_network
    external: true